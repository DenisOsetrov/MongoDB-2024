- Спочатку запускаємо використання бази даних:
    use osetrov
- наповнюємо її колекцією студентів і вчителів з lesson-hw-2-dump
    і перевіряємо     db.students.find()  // Ctrl+Enter
    і перевіряємо     db.teacher.find()  // Ctrl+Enter
- працюємо в консолі. Всі коланди можна скопіювати до консолі!


=== Лекція №3 ===

// Пошук усіх студентів
db.students.find()

// Пошук студентів, які вивчають англійську та математику
db.students.find({lessons:{$all:['english', 'mathematics']}})

// Пошук студентів, які вивчають математику
db.students.find({'lessons.1':'mathematics'})

// Пошук першого студента, який вивчає математику та виведення його імені
db.students.findOne({'lessons.1':'mathematics'}).name

// Пошук усіх студентів з обмеженням кількості елементів у масиві предметів
db.students.find({}, {lessons:{$slice:2}})

// Пошук студентів, які вивчають лише один предмет
db.students.find({lessons:{$size:1}})

// Додавання предмету "python" студенту з певним _id
db.students.updateOne(
    {_id:ObjectId('661ff9d5119a1630747ecdb3')},
    {$push:{lessons:'python'}}
)


// дізнатися кількість предметів у масиві lessons для певного студента
db.students.aggregate([
    {
        $match: { _id: ObjectId("662218f2fbc5ca67c6439535") } // Фільтр за унікальним ідентифікатором студента
    },
    {
        $project: {
            numberOfLessons: { $size: "$lessons" } // Додаємо нове поле numberOfLessons з кількістю предметів в масиві lessons
        }
    }
])

// видалити елемент з масиву - всі python
db.students.updateOne(
    { _id: ObjectId("662218f2fbc5ca67c6439535") }, // Фільтр за унікальним ідентифікатором студента
    { $pull: { lessons: 'python' } } // Видалення елементу 'python' з масиву lessons
    )


// Додавання масиву предметів ['java', 'js'] студенту з певним _id
db.students.updateOne(
    {_id:ObjectId('661ff9d5119a1630747ecdb3')},
    {$push:{lessons:['java', 'js']}}
)

// Додавання масиву предметів ['js', 'docker'] за допомогою $each студенту з певним _id
db.students.updateOne(
    {_id:ObjectId('661ff9d5119a1630747ecdb3')},
    {$push:{lessons:{$each:['js', 'docker']}}}
)


// Видалення масиву предметів ["java", "js"] студенту з певним _id
db.students.updateOne(
    {_id:ObjectId('661ff9d5119a1630747ecdb3')},
    {$pull:{lessons:["java", "js"]}}
)

// Видалення предмету "english" студенту з певним _id
db.students.updateOne(
    {_id:ObjectId('661ff9d5119a1630747ecdb3')},
    {$pull:{lessons:'english'}}
)

// Видалення другого предмету студенту з певним _id
    // $unset - видаляє все поле, тому будемо понкретизувати! lessons.1 - вказуємо індекс масиву, друга 1 - true
    (підтверджуємо видалення)
db.students.updateOne(
    {_id:ObjectId('661ff9d5119a1630747ecdb3')},
    {$unset:{'lessons.1':1}}  //  "lessons": ["english", null, "python", null, null] - тепер через pull видаляємо null
)


// Видалення всіх null значень у масиві предметів студента з певним _id
db.students.updateOne(
    {_id:ObjectId('661ff9d5119a1630747ecdb3')},
    {$pull:{lessons:null}}
)


// Видалення останнього елементу з масиву предметів у студента з певним _id
db.students.updateOne(
    {_id:ObjectId('661ff9d5119a1630747ecdb3')},
    {$pop:{lessons:1}}
)

// Видалення першого елементу з масиву предметів у студента з певним _id
db.students.updateOne(
    {_id:ObjectId('661ff9d5119a1630747ecdb3')},
    {$pop:{lessons:-1}}
)

// Додавання кожного елементу масиву ['js', 'python', 'css'] до масиву предметів студента з певним _id
db.students.updateOne(
    {_id:ObjectId('661ff9d5119a1630747ecdb3')},
    {$addToSet:{lessons:{$each:['js', 'python', 'css']}}}
)

// Додавання тільки унікальних значень
db.students.updateOne({
    _id: ObjectId('662218f2fbc5ca67c6439535')},
    {$addToSet: {lessons: 'job'}
})


// Оновлення професії батьків студентів, якщо вона не визначена, на "waiter"
db.students.updateMany(
    {parents:{$exists:1}, "parents.profession":null},   // Це фільтр, який обмежує вибірку записів. Вона вибирає записи, де є поле parents, і для цього поля значення profession є null.
    {$set:{'parents.$[item].profession':'waiter'}},    // Це операція встановлення значення. Вона встановлює значення profession на waiter для всіх об'єктів parents, які задовольняють умову фільтрації. Однак, вона встановлює значення тільки для елементів, що задовольняють умову масивного фільтру (array filter).
    {'arrayFilters':[{'item.profession':null}]}        // Цей параметр вказує на те, як саме відбувається фільтрація масиву parents. В даному випадку, він вказує, що потрібно вибрати ті елементи масиву parents, де значення profession є null, і встановити для них значення waiter.
)

// Підрахунок загальної кількості батьків у всіх студентів
db.students.aggregate([
    {
        $addFields:{
            countOfParents: {$cond:{if:{$isArray:'$parents'}, then:{$size:'$parents'}, else:0}}
        }
    },
    {
        $group:{
            _id:'',
            sum:{$sum:'$countOfParents'}
        }
    },
        // і щоб виводило лише потрібний результат можна додати ще 1 умову виводу
     {
            $project: {
                _id: 0,
                sum: 1
            }
        }
])