- Спочатку запускаємо використання бази даних:
    use osetrov
- наповнюємо її колекцією студентів і вчителів з lesson-hw-2-dump
    і перевіряємо     db.students.find()  // Ctrl+Enter
    і перевіряємо     db.teacher.find()  // Ctrl+Enter
- працюємо в консолі. Всі коланди можна скопіювати до консолі!


=== Лекція №3 ===

// Пошук усіх студентів
db.students.find()

// Пошук студентів, які вивчають англійську та математику
db.students.find({lessons:{$all:['english', 'mathematics']}})

// Пошук студентів, які вивчають математику
db.students.find({'lessons.1':'mathematics'})

// Пошук першого студента, який вивчає математику та виведення його імені
db.students.findOne({'lessons.1':'mathematics'}).name

// Пошук усіх студентів з обмеженням кількості елементів у масиві предметів
db.students.find({}, {lessons:{$slice:2}})

// Пошук студентів, які вивчають лише один предмет
db.students.find({lessons:{$size:1}})

// Додавання предмету "python" студенту з певним _id
db.students.updateOne(
    {_id:ObjectId('661ff9d5119a1630747ecdb3')},
    {$push:{lessons:'python'}}
)

// Додавання масиву предметів ['java', 'js'] студенту з певним _id
db.students.updateOne(
    {_id:ObjectId('661ff9d5119a1630747ecdb3')},
    {$push:{lessons:['java', 'js']}}
)

// Додавання масиву предметів ['js', 'docker'] за допомогою $each студенту з певним _id
db.students.updateOne(
    {_id:ObjectId('661ff9d5119a1630747ecdb3')},
    {$push:{lessons:{$each:['js', 'docker']}}}
)

// Видалення масиву предметів ["java", "js"] студенту з певним _id
db.students.updateOne(
    {_id:ObjectId('661ff9d5119a1630747ecdb3')},
    {$pull:{lessons:["java", "js"]}}
)

// Видалення предмету "english" студенту з певним _id
db.students.updateOne(
    {_id:ObjectId('661ff9d5119a1630747ecdb3')},
    {$pull:{lessons:'english'}}
)

// Видалення другого предмету студенту з певним _id
db.students.updateOne(
    {_id:ObjectId('661ff9d5119a1630747ecdb3')},
    {$unset:{'lessons.1':1}}
)

// Видалення всіх null значень у масиві предметів студента з певним _id
db.students.updateOne(
    {_id:ObjectId('661ff9d5119a1630747ecdb3')},
    {$pull:{lessons:null}}
)


// Видалення останнього елементу з масиву предметів у студента з певним _id
db.students.updateOne(
    {_id:ObjectId('661ff9d5119a1630747ecdb3')},
    {$pop:{lessons:1}}
)

// Видалення першого елементу з масиву предметів у студента з певним _id
db.students.updateOne(
    {_id:ObjectId('661ff9d5119a1630747ecdb3')},
    {$pop:{lessons:-1}}
)

// Додавання кожного елементу масиву ['js', 'python', 'css'] до масиву предметів студента з певним _id
db.students.updateOne(
    {_id:ObjectId('661ff9d5119a1630747ecdb3')},
    {$addToSet:{lessons:{$each:['js', 'python', 'css']}}}
)

// Оновлення професії батьків студентів, якщо вона не визначена, на "waiter"
db.students.updateMany(
    {parents:{$exists:1}, "parents.profession":null},
    {$set:{'parents.$[item].profession':'waiter'}},
    {'arrayFilters':[{'item.profession':null}]}
)

// Підрахунок загальної кількості батьків у всіх студентів
db.students.aggregate([
    {
        $addFields:{
            countOfParents: {$cond:{if:{$isArray:'$parents'}, then:{$size:'$parents'}, else:0}}
        }
    },
    {
        $group:{
            _id:'',
            sum:{$sum:'$countOfParents'}
        }
    }
])